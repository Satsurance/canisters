type PoolError = variant {
  NoDeposit;
  InsufficientBalance;
  TransferFailed;
  LedgerCallFailed;
  LedgerNotSet;
  NotOwner;
  TimelockNotExpired;
  EpisodeNotActive;
  NotSlashingExecutor;
};

type Deposit = record {
  episode : nat64;
  shares : nat;
};

type Episode = record {
  episode_shares : nat;
  assets_staked : nat;
};

type UserDepositInfo = record {
  deposit_id : nat64;
  episode : nat64;
  shares : nat;
  amount : nat;
};

type PoolState = record {
  total_assets : nat;
  total_shares : nat;
};

type Result = variant { Ok; Err : PoolError };

service : (principal, principal) -> {
  get_deposit_subaccount : (principal, nat64) -> (blob) query;
  get_current_episode_id : () -> (nat64) query;
  get_episode : (nat64) -> (opt Episode) query;
  get_user_deposits : (principal) -> (vec UserDepositInfo) query;
  get_deposit : (nat64) -> (opt Deposit) query;
  get_pool_state : () -> (PoolState) query;
  set_executor_principal : (principal) -> (Result);
  update_episodes_state : () -> ();
  deposit : (principal, nat64) -> (Result);
  withdraw : (nat64) -> (Result);
  slash : (principal, nat) -> (Result);
}